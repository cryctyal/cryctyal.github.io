<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网络协议(一)]]></title>
    <url>%2F2018%2F06%2F08%2F%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[网络协议其实跟生活非常贴近，我们上网浏览新闻，聊天都跟它息息相关。但是因为网络协议众多，又特别抽象，对于很多非计算机专业的人来说，很难入门。很多大神推荐我看各种关于TCPIP的经典名著，说实话，每个字我都看得懂，但是合起来就蒙圈了。因此，结合生活例子，形象化的理解网络协议就特别重要。我写这系列文章的初衷是希望通过非技术视角，给出关于网络协议更接地气的解释，帮助更多小伙伴入门。 不懂计算机网络? 那先来发明一个互联网吧！我们驾驶着时光机回到了1960年，看着一台台巨无霸型的“个人电脑”，作为伟大的先（yi）知（yin）者，准备开始发明互联网，来连接这一台台电脑。我们想了一个法子：用一条条电线将电脑连接到一个黑盒子里，我们寄希望于这个伟大的黑盒子能帮助我们传递消息。我们迫不及待地打开电脑，想用Facebook发条状态，宣告我们伟大发明的诞生。咦，奇怪，怎么发不出去呢？计算机就像是一个个小婴儿一样，我们得教会他们行为、礼仪。比如如何去和其他计算机沟通交流，在不同场合需要注意些什么，并且把行为礼仪深深的印在他们脑海里。 因此，我们展开了一场盛大的互联网大会，会议中展开了热烈而富有成效的讨论，得出了结论：计算机之间的互相通信，每台计算机都要用相同的办法。比如如何探测到通信目标、由哪一边发起、使用何种语言进行沟通，如何结束通信等等。我们还考虑到了不同硬件、操作系统间的通信。因此我们一致同意，需要定制一系列的规则，统称为协议（protocol）。 协议中存在格式各样的内容，从电缆的规格到IP地址的选定办法、查找异地用户的方法、双方建立通讯的顺序，以及Web页面显示需要处理的步骤等等。我们很厉害有木有！我们给了这些互联网相关的协议集合一个酷炫的名称 - TCP/IP。那么有了这么多牛逼轰轰的协议，我们的消息又是怎么发出去的呢？ TCP/IP的分层TCP/IP 分为4层：应用层、传输层、网络层和数据链路层。为什么这么分呢？从事IT行业的小伙伴比较清楚，如果不分层，整个互联网只有一个协议，我们某个地方需要改动，就需要把整个协议替换掉，而如果进行分层，只需定义好各层的接口，以后如果有改动只需要改动相应的层即可。其次，每个层的角色也相对单一些，大大减少了设计的复杂度。 虽然我们为TCP/IP的4层取了牛逼哄哄的名字，我们借鉴了邮局寄信的逻辑。这里我们举个例子。 应用层产品经理小陈与程序员小徐是好基友，经常互相写信互诉衷肠。小陈有一天想小徐了，就写了一封满怀思念之情的信，但是小徐只看得懂中文，因此小陈还很贴心的标注了下，该文全程中文，无任何英文装逼词汇，最后画了一个小爱心后，把信装进信封里。 对于小陈来说，他关心的是信本身，但是没有信封、邮票，信就寄不出去。比如我们发出去的QQ信息，浏览的HTML内容，都属于应用数据。在网络中，我们想要发消息，也需要信封、邮票等等，而这些就是所谓的协议了。 我们在封装信后，填写信息，往往都是有步骤的，比如先填写收件人地址，和发件人地址，再填写收件人名称、寄件人名称等等。在网络协议中，也是类似的，先会封装应用层协议，再封装传输层协议，再封装网络层协议，最后给到链路层。 应用层作用就是定义信内容格式，它通过各种协议来规范数据格式(小陈标注了他是中文写的)，使程序方便识别。应用层常用协议有：DNS、HTTP、FTP、TELNET、SMTP等，这些协议规定了数据的格式，如json、txt、html等。收发双方都要遵循相同的协议格式进行数据传输。 网络层小陈开始写上信封的信息，写上了收件人地址，和发件人地址。 在计算机网络里，这个是网络层做的事情。收信人对应数据包里IP头部中的目的ip地址，寄件人对应数据包里IP头部中的源ip地址，写上寄信、收信两个地址就可以保证信件可以邮寄到目的地了。 传输层小陈开始填写收件人名称、寄件人名称。 小陈填写的这些信息可以理解为TCP协议（传输层）的头部数据。因此同一个地址，可能住了很多人，通过定义端口，确认主机上应用程序的身份，就可以将数据包交给对应的应用程序。 我们回顾下，在信封里包含的信息： 邮编：200000收件人：小徐发往：上海市金沙江路1038号寄件人：小陈寄自：上海市奉贤区 这张图摘自于图解HTTP,可以很清楚了解到在互联网中，发送一条消息时，时如何像封装一层层信息，来保证传输的。 小陈把信扔进信箱，过了几天，小徐就收到这封信了。 消息如何传送？信寄出去，会有人去信箱拿信，然后带到邮局，再进行分发。那计算机网络是如何把数据包传输到目的地的？比如我们的电脑在生成数据包时，明明输入的是一个域名，电脑是怎么知道对方电脑的IP地址的？（涉及到了DNS协议）。网络中的邮局又是谁呢？（涉及到了网关），网关又是如何帮我们把数据包传输到目的地的？（各种路由协议） 这些信息可以在白话网络协议（二）中得到比较好的解答。 原文转载自：恺龙说/网络协议(一)]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IaaS、PaaS、SaaS的区别]]></title>
    <url>%2F2018%2F06%2F04%2FIaaS%E3%80%81PaaS%E3%80%81SaaS%2F</url>
    <content type="text"><![CDATA[工作中经常会遇到PaaS、SaaS这样的专用名词，一直很困惑，对于它们之间的区别也不清楚，所以我从网上整理了相关的介绍，作为笔记时刻阅读。 1.名词的定义 IaaS：基础设施服务，Infrastructure-as-a-service PaaS：平台服务，Platform-as-a-service SaaS：软件服务，Software-as-a-service 2.形象的比喻请设想你是一个餐饮业者，打算做披萨生意。你可以从头到尾，自己生产披萨，但是这样比较麻烦，需要准备的东西多，因此你决定外包一部分工作，采用他人的服务。你有三个方案。 1. 方案一：IaaS他人提供厨房、炉子、煤气，你使用这些基础设施，来烤你的披萨。 2. 方案二：PaaS除了基础设施，他人还提供披萨饼皮。你只要把自己的配料洒在饼皮上，让他帮你烤出来就行了。也就是说，你要做的就是设计披萨的味道（海鲜披萨或者鸡肉披萨），他人提供平台服务，让你把自己的设计实现。 3.方案三：SaaS他人直接做好了披萨，不用你的介入，到手的就是一个成品。你要做的就是把它卖出去，最多再包装一下，印上你自己的 Logo。 上面的三种方案，可以总结成下面这张图。 从左到右，自己承担的工作量（上图蓝色部分）越来越少，IaaS &gt; PaaS &gt; SaaS。 对应软件开发，则是下面这张图。 SaaS 是软件的开发、管理、部署都交给第三方，不需要关心技术问题，可以拿来即用。普通用户接触到的互联网服务，几乎都是 SaaS，下面是一些例子。 客户管理服务 Salesforce团队协同服务 Google Apps储存服务 Box储存服务 Dropbox社交服务 Facebook / Twitter / Instagram PaaS 提供软件部署平台（runtime），抽象掉了硬件和操作系统细节，可以无缝地扩展（scaling）。开发者只需要关注自己的业务逻辑，不需要关注底层。下面这些都属于 PaaS。 HerokuGoogle App EngineOpenShift IaaS 是云服务的最底层，主要提供一些基础资源。它与 PaaS 的区别是，用户需要自己控制底层，实现基础设施的使用逻辑。下面这些都属于 IaaS。 Amazon EC2Digital OceanRackSpace Cloud]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>IaaS</tag>
        <tag>PaaS</tag>
        <tag>SaaS</tag>
      </tags>
  </entry>
</search>
